{"version":3,"sources":["Navbar.tsx","Home.tsx","Create.tsx","App.tsx","index.tsx"],"names":["Navbar","className","to","all_posts","gql","Home","useQuery","loading","error","data","posts","map","content","title","body","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","headers","insert_post_data","Create","useState","setTitle","setBody","isPending","setIsPending","history","useHistory","onSubmit","e","mutate","mutation","variables","push","type","required","value","onChange","target","disabled","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAeeA,EAbA,WACX,OACI,sBAAKC,UAAU,SAAf,UACI,8CACA,sBAAKA,UAAU,QAAf,UACI,cAAC,IAAD,CAAMC,GAAG,IAAT,kBACA,cAAC,IAAD,CAAMA,GAAG,UAAT,6B,QCNVC,EAAYC,cAAH,qGA8BAC,EArBQ,WAAO,IAAD,EACIC,mBAASH,GAA/BI,EADkB,EAClBA,QAAQC,EADU,EACVA,MAAMC,EADI,EACJA,KAGrB,OAAGF,EACQ,yCAERC,EACQ,sDAEJC,EAAKC,MAAMC,KAAI,SAACC,GACnB,OACI,sBAAKX,UAAU,eAAf,UACI,6BAAKW,EAAQC,QACb,4BAAID,EAAQE,c,QCpBtBC,EAAQ,IAAIC,eAAa,CAC3BC,MAAO,IAAIC,gBACXC,KAAM,IAAIC,WAAS,CACjBC,IAAK,kDACLC,QAAS,CACP,wBAAwB,wEAI1BC,EAAmBnB,cAAH,2KA+CPoB,EAxCA,WAAO,IAAD,EACMC,mBAAS,IADf,mBACVZ,EADU,KACJa,EADI,OAEID,mBAAS,IAFb,mBAEVX,EAFU,KAELa,EAFK,OAGcF,oBAAS,GAHvB,mBAGVG,EAHU,KAGAC,EAHA,KAIXC,EAAQC,cAWd,OACI,sBAAK9B,UAAU,SAAf,UACI,gDACA,uBAAM+B,SAbM,SAACC,GACjBJ,GAAa,GACbd,EAAOmB,OAAO,CACVC,SAAUZ,EACVa,UAAU,CAACvB,MAAMA,EAAMC,KAAKA,KAEhCe,GAAa,GACbC,EAAQO,KAAK,MAMT,UACI,gDACA,uBACIC,KAAK,OACLC,UAAQ,EACRC,MAAO3B,EACP4B,SAAU,SAACR,GAAKP,EAASO,EAAES,OAAOF,UAEtC,+CACA,0BACID,UAAQ,EACRC,MAAO1B,EACP2B,SAAU,SAACR,GAAKN,EAAQM,EAAES,OAAOF,WAGnCZ,GAAa,8CACdA,GAAa,wBAAQe,UAAQ,EAAhB,+BChDxB5B,EAAQ,IAAIC,eAAa,CAC7BC,MAAO,IAAIC,gBACXC,KAAM,IAAIC,WAAS,CACjBC,IAAK,kDACLC,QAAS,CACP,wBAAwB,wEA4BfsB,MAvBf,WACE,OACE,cAAC,iBAAD,CAAgB7B,OAAQA,EAAxB,SACE,cAAC,IAAD,UACE,gCACE,cAAC,EAAD,IACA,qBAAKd,UAAU,UAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO4C,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,UAAZ,SACE,cAAC,EAAD,mBCzBhBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.1fb7cd41.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\n\nconst Navbar = () => {\n    return ( \n        <nav className=\"navbar\">\n            <h1>BB's Website</h1>\n            <div className=\"links\">\n                <Link to=\"/\">Home</Link>\n                <Link to=\"/create\" >New Post</Link>\n            </div>\n\n        </nav>\n    );\n}\n \nexport default Navbar;","import { gql, useQuery } from '@apollo/client';\nimport React from 'react';\nconst all_posts = gql`\n{\n  posts(order_by: {id: desc}) {\n    id\n    body\n    title\n  }\n}\n`; \nconst Home: React.FC = () => {\n    const {loading,error,data} = useQuery(all_posts);\n    // var x:any=data;\n    // console.log(x);\n    if(loading){\n        return <h5>Loading</h5>\n    }\n    if(error){\n        return <h5>Something's Wrong...</h5>;\n    }\n    return data.posts.map((content:any)=>{\n        return(\n            <div className=\"post-preview\">\n                <h2>{content.title}</h2>\n                <p>{content.body}</p>\n            </div>\n        )\n    });\n\n}\n \nexport default Home;","import { gql } from \"@apollo/client\";\nimport { useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\n\nimport {ApolloClient, InMemoryCache, HttpLink} from '@apollo/client';\nconst client= new ApolloClient({\n    cache: new InMemoryCache(),\n    link: new HttpLink({\n      uri: 'https://touched-serval-58.hasura.app/v1/graphql',\n      headers: {\n        'x-hasura-admin-secret': `IwLaLm1BACwrg8vx1oN8Z6H6UJSVyUvwzVsyYLjk5EjdQSwI3KlztYLI3mJOOQKh`\n      }\n    }),\n  });\nconst insert_post_data = gql`\n    mutation posts($body: String!, $title: String!) {\n    insert_posts(objects: {body: $body, title: $title}) {\n      affected_rows\n    }\n}`\n;\nconst Create = () => {\n    const [title,setTitle]=useState('');\n    const [body,setBody]=useState('');\n    const [isPending,setIsPending]=useState(false);\n    const history=useHistory();\n    const handleSubmit= (e:any) => {\n        setIsPending(true);\n        client.mutate({\n            mutation: insert_post_data,\n            variables:{title:title,body:body}\n          })\n        setIsPending(false);\n        history.push('/');\n\n    }\n    return ( \n        <div className=\"create\">\n            <h2>Add a New Post</h2>\n            <form onSubmit={handleSubmit}>\n                <label>Post Title:</label>\n                <input\n                    type=\"text\"\n                    required\n                    value={title}\n                    onChange={(e)=>{setTitle(e.target.value)}}\n                />\n                <label>Post Body:</label>\n                <textarea\n                    required\n                    value={body}\n                    onChange={(e)=>{setBody(e.target.value)}}\n                ></textarea>\n                \n                {!isPending && <button>Add Post</button>}\n                {isPending && <button disabled>Adding ...</button>}\n            </form>\n        </div>\n    );\n}\n \nexport default Create;","import React from 'react';\nimport {BrowserRouter as Router,Switch,Route} from 'react-router-dom';\nimport { ApolloClient, InMemoryCache, HttpLink, ApolloProvider} from '@apollo/client';\nimport Navbar from './Navbar';\nimport Home from './Home';\nimport Create from './Create';\n\nconst client= new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'https://touched-serval-58.hasura.app/v1/graphql',\n    headers: {\n      'x-hasura-admin-secret': `IwLaLm1BACwrg8vx1oN8Z6H6UJSVyUvwzVsyYLjk5EjdQSwI3KlztYLI3mJOOQKh`\n    }\n  }),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Navbar/>\n          <div className=\"content\">\n            <Switch>\n              <Route exact path=\"/\">\n                <Home/>\n              </Route>\n              <Route path=\"/create\">\n                <Create/>\n              </Route>\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    </ApolloProvider>\n  \n);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n      <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}